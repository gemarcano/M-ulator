num_bits = 6 + 23 + 11 = 40
code = 0x20 (10 0000)
count = 88 (1000 1000)
temp.val = 352 (0001 0110 0000)

uint64_t reverse_bits_ext (uint32_t code, uint32_t count, uint32_t value) {
    uint64_t rev_bit_stream;
    rev_bit_stream  = reverse_bits(/*bit_stream*/value, /*num_bits*/11);
    rev_bit_stream <<= 23;
    rev_bit_stream |= reverse_bits(/*bit_stream*/count, /*num_bits*/23);

    // For 128xN-th sample (code = 11'b000_0000_0000)
    if (code == 0x0) {
        rev_bit_stream <<= 11;
        //rev_bit_stream |= 0x000;  // code reversed
    }
    // For non-128xN-th sample (code = 6'b10_0000)
    else {
        rev_bit_stream <<= 6;
        rev_bit_stream |= 0x01; // code reversed
    }

    return rev_bit_stream;
}



    rev_bit_stream  = reverse_bits(/*bit_stream*/value, /*num_bits*/11);
                    = reverse_bits(0001_0110_0000, 11)
                    = 00000110100

    rev_bit_stream <<= 23;
                    = 00000110100
                    = 
                    = 

    rev_bit_stream |= reverse_bits(/*bit_stream*/count, /*num_bits*/23);
                    = 00_0011_0100_0000_0000_0000_0000_0000_0000 | reverse_bits(1000_1000, 23)
                    = 00_0011_0100_0000_0000_0000_0000_0000_0000 | 000_0000_0000_0000_0001_0001
                    = 00_0011_0100_0000_0000_0000_0000_0001_0001

    // For non-128xN-th sample (code = 6'b10_0000)
    else {
        rev_bit_stream <<= 6;
                    = 0000_1101_0000_0000_0000_0000_0000_0100_0100_0000

        rev_bit_stream |= 0x01; // code reversed
                    = 0000_1101_0000_0000_0000_0000_0000_0100_0100_0001
    }

    return rev_bit_stream;
}

Adam:
             = 0000 0010 1000 0011 0100 0000 0000 0000 0000 0001
                     ^



For 351
reverse_code = (MBus) FA83400001
             = 1111 1010 1000 0011 0100 0000 0000 0000 0000 0001
             value = 1111 1010 100 -> 001 0101 1111 = 0x15F (351)
             count = 0 0011 0100 0000 0000 0000 00 -> 000000000000000 0101 1000 -> 88
For 352:
reverse_code = (MBus) 0683400001 
             = 0000 0110 1000 0011 0100 0000 0000 0000 0000 0001
             value = 0000 0110 100 -> 001 0110 0000 -> 0x160 (352)
             count = 0 0011 0100 0000 0000 0000 00 -> 000000000000000 0101 1000 -> 88


value = 350

    rev_bit_stream  = reverse_bits(/*bit_stream*/value, /*num_bits*/11);

            MBus: 00000000 000003D4

    rev_bit_stream <<= 23;
    rev_bit_stream |= reverse_bits(/*bit_stream*/count, /*num_bits*/23);

            MBus: 00000001 EA0D0000

    rev_bit_stream <<= 6;
    rev_bit_stream |= 0x01; // code reversed

            MBus: 0000007A 83400001

            7A 83400001

            0111 1010 100  0 0011 0100 0000 0000 0000 0000 0001

            -> CORRECT


Adam:       = 0x02 8340 0001
             = 0000 0010 1000 0011 0100 0000 0000 0000 0000 0001
                     ^
Sample No: 485
bit_start = 2054


num_bits = 40

bit_pos_start = 2054 (1000_0000_0110)
bit_pos_end = 2093 (1000_0010_1101)
last_qword_id = bit_pos_end>>7 = 16 (1_0000)

bit_pos_start >> 7 = 1000_0
bit_pos_end   >> 7 = 1000_0

end_at_bndry = 0

save_qword(/*msb*/010_1101, /*lsb*/000_0110, /*value*/reverse_code)
save_qword(/*msb*/45, /*lsb*/6, /*value*/reverse_code)


void sub_qword (uint32_t msb, uint32_t lsb, uint64_t value) {
// Valid Range: msb= 0 - 127
//              lsb= 0 - 127
//
    uint32_t num_bits = msb - lsb + 1;
        -> num_bits = 45 - 6 + 1 
                    = 40

    uint32_t wid = (lsb>>5);    // Word ID
        -> wid = 0

    uint32_t lsb0 = lsb&0x1F;   // LSB within a word
        -> lsb0 = 6

    uint32_t nb;                // Num Bits to Write

    while (num_bits>0) {
        nb = (num_bits > (32 - lsb0)) ? (32 - lsb0) : num_bits;
            -> nb = 32-lsb0 = 24
        *(qword + wid) = set_bits(/*var*/*(qword+wid), /*msb_idx*/lsb0 + nb - 1, /*lsb_idx*/lsb0, /*value*/value&0xFFFFFFFF);
        wid++;
        value = rsh64(/*var*/value, /*nb*/nb);
        num_bits -= nb;
        lsb0 = 0;
    }
}

0xE9, 0xFFFFC1A0
0xE8, 0xD000007F
0xE7, 0x00000000
0xE6, 0x00000000
0xE5, 0x00000000
0xE4, 0x00000002
0xE7, 0x0000000E
0xE6, 0x000001A0
0xE5, 0x00000000
0xE4, 0x00000001
0xE1, 0x00000028
0xE3, 0x00000006
0xE2, 0x00000000
0xE1, 0x00000028

683400001
0000 0110 1000 0011 0100 0000 0000 0000 0000 0001

0xE1, 0x00000028: num_bits = 0x28 = 40
0xE2, 0x00000000: wid = 0
0xE3, 0x00000006: lsb0 = 6
while (num_bits >0)
0xE1, 0x00000028: num_bits = 40
0xE4, 0x00000001: wid = 1
0xE5, 0x00000000: 
0xE6, 0x000001A0: value= value>>26 = 0x1A0
0xE7, 0x0000000E: num_bits = 14

0xE4, 0x00000002: wid = 2
0xE5, 0x00000000: 
0xE6, 0x00000000: value = value >> 26 = 0
0xE7, 0x00000000: num_bits = 0

0xE8, 0xD000007F: qword+0 = 1101 0000 0000 0000 0000 0000 0111 1111
0xE9, 0xFFFFC1A0: qword+1 = 1111 1111 1111 1111 1100 0001 1010 0000


* reverse_bits_ext(/*code*/0x20, /*count*/88, /*value*/val);
    val from 340 to 359

    359: 1110 0110 1000 0011 0100 0000 0000 0000 0000 0001   
    358: 0110 0110 1000 0011 0100 0000 0000 0000 0000 0001   
    357: 1010 0110 1000 0011 0100 0000 0000 0000 0000 0001   
    356: 0010 0110 1000 0011 0100 0000 0000 0000 0000 0001   
    355: 1100 0110 1000 0011 0100 0000 0000 0000 0000 0001   
    354: 0100 0110 1000 0011 0100 0000 0000 0000 0000 0001   
    353: 1000 0110 1000 0011 0100 0000 0000 0000 0000 0001   
    352: 0000 0110 1000 0011 0100 0000 0000 0000 0000 0001   
    351: 1111 1010 1000 0011 0100 0000 0000 0000 0000 0001   
    350: 0111 1010 1000 0011 0100 0000 0000 0000 0000 0001   
    349: 1011 1010 1000 0011 0100 0000 0000 0000 0000 0001   
    348: 0011 1010 1000 0011 0100 0000 0000 0000 0000 0001   
    347: 1101 1010 1000 0011 0100 0000 0000 0000 0000 0001   
    346: 0101 1010 1000 0011 0100 0000 0000 0000 0000 0001   
    345: 1001 1010 1000 0011 0100 0000 0000 0000 0000 0001   
    344: 0001 1010 1000 0011 0100 0000 0000 0000 0000 0001   
    343: 1110 1010 1000 0011 0100 0000 0000 0000 0000 0001   
    342: 0110 1010 1000 0011 0100 0000 0000 0000 0000 0001   
    341: 1010 1010 1000 0011 0100 0000 0000 0000 0000 0001   
    340: 0010 1010 1000 0011 0100 0000 0000 0000 0000 0001   
    -> Encoding Looks All Correct.

A = 0x7E24 (31.535156)
B = 0x541C29 (5383.04)
Hibernation Threshold = 0x39 (57)
       mbus_write_message32(0xEA, tconv(   /* dout */ val,
                                            /*   a  */ 0x7E24,      /*31.535156*/
                                            /*   b  */ 0x541C29,    /*5383.04*/
                                            /*offset*/ COMP_OFFSET_K)
                            );

raw   val(hex) val(dec)
66: 0x00000173: 371
65: 0x00000171: 369
64: 0x0000016E: 366
63: 0x0000016C: 364
62: 0x0000016A: 362
61: 0x00000168: 360
60: 0x00000165: 357
59: 0x00000163: 355
58: 0x00000161: 353
57: 0x0000015E: 350
56: 0x0000015C: 348
55: 0x00000159: 345
54: 0x00000157: 343
53: 0x00000154: 340
52: 0x00000151: 337
51: 0x0000014F: 335
50: 0x0000014C: 332
49: 0x00000149: 329
48: 0x00000147: 327
47: 0x00000144: 324
46: 0x00000141: 321
45: 0x0000013E: 318
44: 0x0000013B: 315
43: 0x00000138: 312
42: 0x00000134: 308
41: 0x00000131: 305
40: 0x0000012E: 302
39: 0x0000012B: 299
38: 0x00000127
37: 0x00000124
36: 0x00000120
35: 0x0000011C
34: 0x00000118
33: 0x00000115
32: 0x00000111
31: 0x0000010C
30: 0x00000108
29: 0x00000104
28: 0x000000FF
27: 0x000000FB


320 -> 0x140
46 -> 0x2E (0010_1110)

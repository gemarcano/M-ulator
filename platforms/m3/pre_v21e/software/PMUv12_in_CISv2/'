//*******************************************************************
//Author: Yejoong Kim
//Description: PMUv12 (in CISv2) Testing
//
//Board: Single-Socket Board
//Chips: PREv21E -> SNTv5 -> MRRv11A -> PMUv12 (CISv2)
//
// Behavior upon GOC/EP IRQ:
//
// REG0
// [23:16]  [15:8]  [7:0]   Description
// ----------------------------------------------
// ----------------------------------------------
//
//*******************************************************************
  
#include "PREv21E.h"
#include "PREv21E_RF.h"
#include "SNTv5_RF.h"
#include "MRRv11A_RF.h"
#include "PMUv12_RF.h"
#include "mbus.h"

// uncomment this for debug mbus message
//#define DEBUG_MBUS_MSG

// Short Prefixes
#define SNT_ADDR 0x4
#define MRR_ADDR 0x5
#define PMU_ADDR 0x6

//********************************************************************
// Global Variables
//********************************************************************
// "static" limits the variables to this file, giving compiler more freedom
// "volatile" should only be used for MMIO --> ensures memory storage
volatile uint32_t enumerated;

// CPU IRQ List
volatile cpu_irq_list_t irq_pending = CPU_IRQ_LIST_DEFAULT;

// SNT Register File
volatile sntv5_r08_t sntv5_r08 = SNTv5_R08_DEFAULT;
volatile sntv5_r09_t sntv5_r09 = SNTv5_R09_DEFAULT;
volatile sntv5_r17_t sntv5_r17 = SNTv5_R17_DEFAULT;
volatile sntv5_r19_t sntv5_r19 = SNTv5_R19_DEFAULT;
volatile sntv5_r1A_t sntv5_r1A = SNTv5_R1A_DEFAULT;

//*******************************************************************
// INTERRUPT HANDLERS (Enable only what you need)
//*******************************************************************
//void handler_ext_int_wakeup   (void) __attribute__ ((interrupt ("IRQ"))); 
//void handler_ext_int_softreset(void) __attribute__ ((interrupt ("IRQ"))); 
void handler_ext_int_gocep    (void) __attribute__ ((interrupt ("IRQ"))); 
//void handler_ext_int_timer32  (void) __attribute__ ((interrupt ("IRQ"))); 
//void handler_ext_int_timer16  (void) __attribute__ ((interrupt ("IRQ"))); 
//void handler_ext_int_mbustx   (void) __attribute__ ((interrupt ("IRQ"))); 
//void handler_ext_int_mbusrx   (void) __attribute__ ((interrupt ("IRQ"))); 
//void handler_ext_int_mbusfwd  (void) __attribute__ ((interrupt ("IRQ"))); 
//void handler_ext_int_reg0     (void) __attribute__ ((interrupt ("IRQ"))); 
//void handler_ext_int_reg1     (void) __attribute__ ((interrupt ("IRQ"))); 
//void handler_ext_int_reg2     (void) __attribute__ ((interrupt ("IRQ"))); 
//void handler_ext_int_reg3     (void) __attribute__ ((interrupt ("IRQ"))); 
//void handler_ext_int_reg4     (void) __attribute__ ((interrupt ("IRQ"))); 
//void handler_ext_int_reg5     (void) __attribute__ ((interrupt ("IRQ"))); 
void handler_ext_int_reg6     (void) __attribute__ ((interrupt ("IRQ"))); 
void handler_ext_int_reg7     (void) __attribute__ ((interrupt ("IRQ"))); 
//void handler_ext_int_mbusmem  (void) __attribute__ ((interrupt ("IRQ"))); 
//void handler_ext_int_aes      (void) __attribute__ ((interrupt ("IRQ"))); 
//void handler_ext_int_gpio     (void) __attribute__ ((interrupt ("IRQ"))); 
//void handler_ext_int_spi      (void) __attribute__ ((interrupt ("IRQ"))); 
//void handler_ext_int_xot      (void) __attribute__ ((interrupt ("IRQ"))); 
//-------------------------------------------------------------------
//void handler_ext_int_wakeup   (void){ *NVIC_ICPR = (0x1 << IRQ_WAKEUP    ); irq_pending.wakeup     = 0x1; }
//void handler_ext_int_softreset(void){ *NVIC_ICPR = (0x1 << IRQ_SOFT_RESET); irq_pending.soft_reset = 0x1; }
void handler_ext_int_gocep    (void){ *NVIC_ICPR = (0x1 << IRQ_GOCEP     ); irq_pending.gocep      = 0x1; }
//void handler_ext_int_timer32  (void){ *NVIC_ICPR = (0x1 << IRQ_TIMER32   ); irq_pending.timer32    = 0x1; }
//void handler_ext_int_timer16  (void){ *NVIC_ICPR = (0x1 << IRQ_TIMER16   ); irq_pending.timer16    = 0x1; }
//void handler_ext_int_mbustx   (void){ *NVIC_ICPR = (0x1 << IRQ_MBUS_TX   ); irq_pending.mbus_tx    = 0x1; }
//void handler_ext_int_mbusrx   (void){ *NVIC_ICPR = (0x1 << IRQ_MBUS_RX   ); irq_pending.mbus_rx    = 0x1; }
//void handler_ext_int_mbusfwd  (void){ *NVIC_ICPR = (0x1 << IRQ_MBUS_FWD  ); irq_pending.mbus_fwd   = 0x1; }
//void handler_ext_int_reg0     (void){ *NVIC_ICPR = (0x1 << IRQ_REG0      ); irq_pending.reg0       = 0x1; }
//void handler_ext_int_reg1     (void){ *NVIC_ICPR = (0x1 << IRQ_REG1      ); irq_pending.reg1       = 0x1; }
//void handler_ext_int_reg2     (void){ *NVIC_ICPR = (0x1 << IRQ_REG2      ); irq_pending.reg2       = 0x1; }
//void handler_ext_int_reg3     (void){ *NVIC_ICPR = (0x1 << IRQ_REG3      ); irq_pending.reg3       = 0x1; }
//void handler_ext_int_reg4     (void){ *NVIC_ICPR = (0x1 << IRQ_REG4      ); irq_pending.reg4       = 0x1; }
//void handler_ext_int_reg5     (void){ *NVIC_ICPR = (0x1 << IRQ_REG5      ); irq_pending.reg5       = 0x1; }
void handler_ext_int_reg6     (void){ *NVIC_ICPR = (0x1 << IRQ_REG6      ); irq_pending.reg6       = 0x1; }
void handler_ext_int_reg7     (void){ *NVIC_ICPR = (0x1 << IRQ_REG7      ); irq_pending.reg7       = 0x1; }
//void handler_ext_int_mbusmem  (void){ *NVIC_ICPR = (0x1 << IRQ_MBUS_MEM  ); irq_pending.mbus_mem   = 0x1; }
//void handler_ext_int_aes      (void){ *NVIC_ICPR = (0x1 << IRQ_AES       ); irq_pending.aes        = 0x1; }
//void handler_ext_int_gpio     (void){ *NVIC_ICPR = (0x1 << IRQ_GPIO      ); irq_pending.gpio       = 0x1; }
//void handler_ext_int_spi      (void){ *NVIC_ICPR = (0x1 << IRQ_SPI       ); irq_pending.spi        = 0x1; }
//void handler_ext_int_xot      (void){ *NVIC_ICPR = (0x1 << IRQ_XOT       ); irq_pending.xot        = 0x1; }

//***************************************************
// Function Declarations
//***************************************************
static void operation_init(void);
static void operation_sleep(void);
static void operation_sleep_notimer(void);


//********************************************************************
// User-Defined Functions
//********************************************************************

static void operation_init(void){

    //Enumerate & Initialize Registers
    enumerated = 0x5453104b; // 0x5453 is TS in ascii
  
    //Enumeration
    set_halt_until_mbus_trx();
    mbus_enumerate(SNT_ADDR);
    mbus_enumerate(MRR_ADDR);
    mbus_enumerate(PMU_ADDR);
    set_halt_until_mbus_tx();

	// PMU Settings ----------------------------------------------
	pmu_set_clk_init();
	pmu_reset_solar_short();

	// Disable PMU ADC measurement in active mode
	// PMU_CONTROLLER_STALL_ACTIVE
	// Updated for PMUv9
    pmu_reg_write(0x3A, 
		( (1 << 20) // ignore state_horizon; default 0
		| (0 << 19) // vbat_read_only
		| (1 << 13) // ignore adc_output_ready; default 0
		| (1 << 12) // ignore adc_output_ready; default 0
		| (1 << 11) // ignore adc_output_ready; default 0
	));

	pmu_adc_reset_setting();
	pmu_adc_enable();

    // Go to sleep without timer
    operation_sleep_notimer();

}

static void operation_sleep(void){
	*GOC_DATA_IRQ = 0; // Reset GOC_DATA_IRQ
    mbus_sleep_all();
    while(1);
}

static void operation_sleep_notimer(void){
    set_wakeup_timer(/*timestamp*/0, /*irq_en*/0, /*reset*/0);
    operation_sleep();
}


//********************************************************************
// MAIN function starts here             
//********************************************************************

int main(){

    // Only enable relevant interrupts
	*NVIC_ISER = (1 << IRQ_GOCEP);

    // Disable watchdog timers
    *TIMERWD_GO = 0;
    *REG_MBUS_WD = 0;

    // Initialization sequence
    if (enumerated != 0x5453104b){
        operation_init();
    }








    // Go to Sleep
    mbus_sleep_all();

    while(1);
}

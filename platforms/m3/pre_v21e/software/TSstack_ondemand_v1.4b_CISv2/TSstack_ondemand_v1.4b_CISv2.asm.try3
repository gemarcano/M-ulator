
TSstack_ondemand_v1.4b_CISv2/TSstack_ondemand_v1.4b_CISv2.elf:     file format elf32-littlearm


Disassembly of section .text:

00000000 <hang-0xa0>:
   0:	00004000 	andeq	r4, r0, r0
   4:	000000a3 	andeq	r0, r0, r3, lsr #1
	...
  10:	000000a0 	andeq	r0, r0, r0, lsr #1
  14:	000000a0 	andeq	r0, r0, r0, lsr #1
  18:	000000a0 	andeq	r0, r0, r0, lsr #1
  1c:	000000a0 	andeq	r0, r0, r0, lsr #1
  20:	000000a0 	andeq	r0, r0, r0, lsr #1
  24:	000000a0 	andeq	r0, r0, r0, lsr #1
  28:	000000a0 	andeq	r0, r0, r0, lsr #1
  2c:	00000000 	andeq	r0, r0, r0
  30:	000000a0 	andeq	r0, r0, r0, lsr #1
  34:	000000a0 	andeq	r0, r0, r0, lsr #1
	...
  40:	000001dd 	ldrdeq	r0, [r0], -sp
  44:	00000185 	andeq	r0, r0, r5, lsl #3
  48:	00000179 	andeq	r0, r0, r9, ror r1
  4c:	000001d1 	ldrdeq	r0, [r0], -r1
  50:	00000139 	andeq	r0, r0, r9, lsr r1
  54:	00000161 	andeq	r0, r0, r1, ror #2
  58:	00000155 	andeq	r0, r0, r5, asr r1
  5c:	0000016d 	andeq	r0, r0, sp, ror #2
  60:	000000b9 	strheq	r0, [r0], -r9
  64:	000000c9 	andeq	r0, r0, r9, asr #1
  68:	000000d9 	ldrdeq	r0, [r0], -r9
  6c:	000000e9 	andeq	r0, r0, r9, ror #1
  70:	000000f9 	strdeq	r0, [r0], -r9
  74:	00000109 	andeq	r0, r0, r9, lsl #2
  78:	00000119 	andeq	r0, r0, r9, lsl r1
  7c:	00000129 	andeq	r0, r0, r9, lsr #2
  80:	00000145 	andeq	r0, r0, r5, asr #2
  84:	00000191 	muleq	r0, r1, r1
  88:	000001c1 	andeq	r0, r0, r1, asr #3
  8c:	000001a1 	andeq	r0, r0, r1, lsr #3
  90:	000001b1 			; <UNDEFINED> instruction: 0x000001b1
	...

000000a0 <hang>:
  a0:	e7fe      	b.n	a0 <hang>

000000a2 <_start>:
  a2:	f000 f8a1 	bl	1e8 <main>
  a6:	e7fc      	b.n	a2 <_start>

Disassembly of section .text.mbus_write_message32:

000000a8 <mbus_write_message32>:
	// TODO: Read from LC
	return 1;
}

uint32_t mbus_write_message32(uint8_t addr, uint32_t data) {
    uint32_t mbus_addr = 0xA0003000 | (addr << 4);
  a8:	0103      	lsls	r3, r0, #4
  aa:	4802      	ldr	r0, [pc, #8]	; (b4 <mbus_write_message32+0xc>)
  ac:	4318      	orrs	r0, r3
    *((volatile uint32_t *) mbus_addr) = data;
  ae:	6001      	str	r1, [r0, #0]
    return 1;
}
  b0:	2001      	movs	r0, #1
  b2:	4770      	bx	lr
  b4:	a0003000 	.word	0xa0003000

Disassembly of section .text.handler_ext_int_reg0:

000000b8 <handler_ext_int_reg0>:
void handler_ext_int_aes      (void) __attribute__ ((interrupt ("IRQ")));
void handler_ext_int_gpio     (void) __attribute__ ((interrupt ("IRQ")));
void handler_ext_int_spi      (void) __attribute__ ((interrupt ("IRQ")));
void handler_ext_int_xot      (void) __attribute__ ((interrupt ("IRQ")));

void handler_ext_int_reg0(void) { *NVIC_ICPR = (0x1 << IRQ_REG0); }
  b8:	2280      	movs	r2, #128	; 0x80
  ba:	4b02      	ldr	r3, [pc, #8]	; (c4 <handler_ext_int_reg0+0xc>)
  bc:	0052      	lsls	r2, r2, #1
  be:	601a      	str	r2, [r3, #0]
  c0:	4770      	bx	lr
  c2:	46c0      	nop			; (mov r8, r8)
  c4:	e000e280 	.word	0xe000e280

Disassembly of section .text.handler_ext_int_reg1:

000000c8 <handler_ext_int_reg1>:
void handler_ext_int_reg1(void) { *NVIC_ICPR = (0x1 << IRQ_REG1); }
  c8:	2280      	movs	r2, #128	; 0x80
  ca:	4b02      	ldr	r3, [pc, #8]	; (d4 <handler_ext_int_reg1+0xc>)
  cc:	0092      	lsls	r2, r2, #2
  ce:	601a      	str	r2, [r3, #0]
  d0:	4770      	bx	lr
  d2:	46c0      	nop			; (mov r8, r8)
  d4:	e000e280 	.word	0xe000e280

Disassembly of section .text.handler_ext_int_reg2:

000000d8 <handler_ext_int_reg2>:
void handler_ext_int_reg2(void) { *NVIC_ICPR = (0x1 << IRQ_REG2); }
  d8:	2280      	movs	r2, #128	; 0x80
  da:	4b02      	ldr	r3, [pc, #8]	; (e4 <handler_ext_int_reg2+0xc>)
  dc:	00d2      	lsls	r2, r2, #3
  de:	601a      	str	r2, [r3, #0]
  e0:	4770      	bx	lr
  e2:	46c0      	nop			; (mov r8, r8)
  e4:	e000e280 	.word	0xe000e280

Disassembly of section .text.handler_ext_int_reg3:

000000e8 <handler_ext_int_reg3>:
void handler_ext_int_reg3(void) { *NVIC_ICPR = (0x1 << IRQ_REG3); }
  e8:	2280      	movs	r2, #128	; 0x80
  ea:	4b02      	ldr	r3, [pc, #8]	; (f4 <handler_ext_int_reg3+0xc>)
  ec:	0112      	lsls	r2, r2, #4
  ee:	601a      	str	r2, [r3, #0]
  f0:	4770      	bx	lr
  f2:	46c0      	nop			; (mov r8, r8)
  f4:	e000e280 	.word	0xe000e280

Disassembly of section .text.handler_ext_int_reg4:

000000f8 <handler_ext_int_reg4>:
void handler_ext_int_reg4(void) { *NVIC_ICPR = (0x1 << IRQ_REG4); }
  f8:	2280      	movs	r2, #128	; 0x80
  fa:	4b02      	ldr	r3, [pc, #8]	; (104 <handler_ext_int_reg4+0xc>)
  fc:	0152      	lsls	r2, r2, #5
  fe:	601a      	str	r2, [r3, #0]
 100:	4770      	bx	lr
 102:	46c0      	nop			; (mov r8, r8)
 104:	e000e280 	.word	0xe000e280

Disassembly of section .text.handler_ext_int_reg5:

00000108 <handler_ext_int_reg5>:
void handler_ext_int_reg5(void) { *NVIC_ICPR = (0x1 << IRQ_REG5); }
 108:	2280      	movs	r2, #128	; 0x80
 10a:	4b02      	ldr	r3, [pc, #8]	; (114 <handler_ext_int_reg5+0xc>)
 10c:	0192      	lsls	r2, r2, #6
 10e:	601a      	str	r2, [r3, #0]
 110:	4770      	bx	lr
 112:	46c0      	nop			; (mov r8, r8)
 114:	e000e280 	.word	0xe000e280

Disassembly of section .text.handler_ext_int_reg6:

00000118 <handler_ext_int_reg6>:
void handler_ext_int_reg6(void) { *NVIC_ICPR = (0x1 << IRQ_REG6); }
 118:	2280      	movs	r2, #128	; 0x80
 11a:	4b02      	ldr	r3, [pc, #8]	; (124 <handler_ext_int_reg6+0xc>)
 11c:	01d2      	lsls	r2, r2, #7
 11e:	601a      	str	r2, [r3, #0]
 120:	4770      	bx	lr
 122:	46c0      	nop			; (mov r8, r8)
 124:	e000e280 	.word	0xe000e280

Disassembly of section .text.handler_ext_int_reg7:

00000128 <handler_ext_int_reg7>:
void handler_ext_int_reg7(void) { *NVIC_ICPR = (0x1 << IRQ_REG7); }
 128:	2280      	movs	r2, #128	; 0x80
 12a:	4b02      	ldr	r3, [pc, #8]	; (134 <handler_ext_int_reg7+0xc>)
 12c:	0212      	lsls	r2, r2, #8
 12e:	601a      	str	r2, [r3, #0]
 130:	4770      	bx	lr
 132:	46c0      	nop			; (mov r8, r8)
 134:	e000e280 	.word	0xe000e280

Disassembly of section .text.handler_ext_int_timer16:

00000138 <handler_ext_int_timer16>:
void handler_ext_int_timer16(void) { *NVIC_ICPR = (0x1 << IRQ_TIMER16); }
 138:	2210      	movs	r2, #16
 13a:	4b01      	ldr	r3, [pc, #4]	; (140 <handler_ext_int_timer16+0x8>)
 13c:	601a      	str	r2, [r3, #0]
 13e:	4770      	bx	lr
 140:	e000e280 	.word	0xe000e280

Disassembly of section .text.handler_ext_int_mbusmem:

00000144 <handler_ext_int_mbusmem>:
void handler_ext_int_mbusmem(void) { *NVIC_ICPR = (0x1 << IRQ_MBUS_MEM); }
 144:	2280      	movs	r2, #128	; 0x80
 146:	4b02      	ldr	r3, [pc, #8]	; (150 <handler_ext_int_mbusmem+0xc>)
 148:	0252      	lsls	r2, r2, #9
 14a:	601a      	str	r2, [r3, #0]
 14c:	4770      	bx	lr
 14e:	46c0      	nop			; (mov r8, r8)
 150:	e000e280 	.word	0xe000e280

Disassembly of section .text.handler_ext_int_mbusrx:

00000154 <handler_ext_int_mbusrx>:
void handler_ext_int_mbusrx(void) { *NVIC_ICPR = (0x1 << IRQ_MBUS_RX); }
 154:	2240      	movs	r2, #64	; 0x40
 156:	4b01      	ldr	r3, [pc, #4]	; (15c <handler_ext_int_mbusrx+0x8>)
 158:	601a      	str	r2, [r3, #0]
 15a:	4770      	bx	lr
 15c:	e000e280 	.word	0xe000e280

Disassembly of section .text.handler_ext_int_mbustx:

00000160 <handler_ext_int_mbustx>:
void handler_ext_int_mbustx(void) { *NVIC_ICPR = (0x1 << IRQ_MBUS_TX); }
 160:	2220      	movs	r2, #32
 162:	4b01      	ldr	r3, [pc, #4]	; (168 <handler_ext_int_mbustx+0x8>)
 164:	601a      	str	r2, [r3, #0]
 166:	4770      	bx	lr
 168:	e000e280 	.word	0xe000e280

Disassembly of section .text.handler_ext_int_mbusfwd:

0000016c <handler_ext_int_mbusfwd>:
void handler_ext_int_mbusfwd(void) { *NVIC_ICPR = (0x1 << IRQ_MBUS_FWD); }
 16c:	2280      	movs	r2, #128	; 0x80
 16e:	4b01      	ldr	r3, [pc, #4]	; (174 <handler_ext_int_mbusfwd+0x8>)
 170:	601a      	str	r2, [r3, #0]
 172:	4770      	bx	lr
 174:	e000e280 	.word	0xe000e280

Disassembly of section .text.handler_ext_int_gocep:

00000178 <handler_ext_int_gocep>:
void handler_ext_int_gocep(void) { *NVIC_ICPR = (0x1 << IRQ_GOCEP); }
 178:	2204      	movs	r2, #4
 17a:	4b01      	ldr	r3, [pc, #4]	; (180 <handler_ext_int_gocep+0x8>)
 17c:	601a      	str	r2, [r3, #0]
 17e:	4770      	bx	lr
 180:	e000e280 	.word	0xe000e280

Disassembly of section .text.handler_ext_int_softreset:

00000184 <handler_ext_int_softreset>:
void handler_ext_int_softreset(void) { *NVIC_ICPR = (0x1 << IRQ_SOFT_RESET); }
 184:	2202      	movs	r2, #2
 186:	4b01      	ldr	r3, [pc, #4]	; (18c <handler_ext_int_softreset+0x8>)
 188:	601a      	str	r2, [r3, #0]
 18a:	4770      	bx	lr
 18c:	e000e280 	.word	0xe000e280

Disassembly of section .text.handler_ext_int_aes:

00000190 <handler_ext_int_aes>:
void handler_ext_int_aes(void) { *NVIC_ICPR = (0x1 << IRQ_AES); }
 190:	2280      	movs	r2, #128	; 0x80
 192:	4b02      	ldr	r3, [pc, #8]	; (19c <handler_ext_int_aes+0xc>)
 194:	0292      	lsls	r2, r2, #10
 196:	601a      	str	r2, [r3, #0]
 198:	4770      	bx	lr
 19a:	46c0      	nop			; (mov r8, r8)
 19c:	e000e280 	.word	0xe000e280

Disassembly of section .text.handler_ext_int_spi:

000001a0 <handler_ext_int_spi>:
void handler_ext_int_spi(void) { *NVIC_ICPR = (0x1 << IRQ_SPI); }
 1a0:	2280      	movs	r2, #128	; 0x80
 1a2:	4b02      	ldr	r3, [pc, #8]	; (1ac <handler_ext_int_spi+0xc>)
 1a4:	0312      	lsls	r2, r2, #12
 1a6:	601a      	str	r2, [r3, #0]
 1a8:	4770      	bx	lr
 1aa:	46c0      	nop			; (mov r8, r8)
 1ac:	e000e280 	.word	0xe000e280

Disassembly of section .text.handler_ext_int_xot:

000001b0 <handler_ext_int_xot>:
void handler_ext_int_xot(void) { *NVIC_ICPR = (0x1 << IRQ_XOT); }
 1b0:	2280      	movs	r2, #128	; 0x80
 1b2:	4b02      	ldr	r3, [pc, #8]	; (1bc <handler_ext_int_xot+0xc>)
 1b4:	0352      	lsls	r2, r2, #13
 1b6:	601a      	str	r2, [r3, #0]
 1b8:	4770      	bx	lr
 1ba:	46c0      	nop			; (mov r8, r8)
 1bc:	e000e280 	.word	0xe000e280

Disassembly of section .text.handler_ext_int_gpio:

000001c0 <handler_ext_int_gpio>:
void handler_ext_int_gpio(void) { *NVIC_ICPR = (0x1 << IRQ_GPIO); }
 1c0:	2280      	movs	r2, #128	; 0x80
 1c2:	4b02      	ldr	r3, [pc, #8]	; (1cc <handler_ext_int_gpio+0xc>)
 1c4:	02d2      	lsls	r2, r2, #11
 1c6:	601a      	str	r2, [r3, #0]
 1c8:	4770      	bx	lr
 1ca:	46c0      	nop			; (mov r8, r8)
 1cc:	e000e280 	.word	0xe000e280

Disassembly of section .text.handler_ext_int_timer32:

000001d0 <handler_ext_int_timer32>:

void handler_ext_int_timer32(void) { // TIMER32
    *NVIC_ICPR = (0x1 << IRQ_TIMER32);
 1d0:	2208      	movs	r2, #8
 1d2:	4b01      	ldr	r3, [pc, #4]	; (1d8 <handler_ext_int_timer32+0x8>)
 1d4:	601a      	str	r2, [r3, #0]
//    *REG1 = *TIMER32_CNT;
//    *REG2 = *TIMER32_STAT;
//    *TIMER32_STAT = 0x0;
//	wfi_timeout_flag = 1;
//    set_halt_until_mbus_tx();
    }
 1d6:	4770      	bx	lr
 1d8:	e000e280 	.word	0xe000e280

Disassembly of section .text.handler_ext_int_wakeup:

000001dc <handler_ext_int_wakeup>:
//[ 4] = mbus message
//[ 8] = gpio[0]
//[ 9] = gpio[1]
//[10] = gpio[2]
//[11] = gpio[3]
    *NVIC_ICPR = (0x1 << IRQ_WAKEUP); 
 1dc:	2201      	movs	r2, #1
 1de:	4b01      	ldr	r3, [pc, #4]	; (1e4 <handler_ext_int_wakeup+0x8>)
 1e0:	601a      	str	r2, [r3, #0]
//	mbus_write_message32(0xAB, (0x3C << 24) | (*((volatile uint32_t *) 0xA00000F0) & 0x00FFFFFF));
//	mbus_write_message32(0xAB, (0x3D << 24) | (*((volatile uint32_t *) 0xA00000F4) & 0x00FFFFFF));
//	mbus_write_message32(0xAB, (0x3E << 24) | (*((volatile uint32_t *) 0xA00000F8) & 0x00FFFFFF));
//	mbus_write_message32(0xAB, (0x3F << 24) | (*((volatile uint32_t *) 0xA00000FC) & 0x00FFFFFF));
//	mbus_write_message32(0xAB, (0x40 << 24) | (*((volatile uint32_t *) 0xA0000100) & 0x00FFFFFF));
}
 1e2:	4770      	bx	lr
 1e4:	e000e280 	.word	0xe000e280

Disassembly of section .text.startup.main:

000001e8 <main>:
//********************************************************************
// MAIN function starts here             
//********************************************************************

int main(){
	mbus_write_message32(0xAF, 0x00000000);
 1e8:	2100      	movs	r1, #0
int main(){
 1ea:	b510      	push	{r4, lr}
	mbus_write_message32(0xAF, 0x00000000);
 1ec:	20af      	movs	r0, #175	; 0xaf
 1ee:	f7ff ff5b 	bl	a8 <mbus_write_message32>

    // Only enable relevant interrupts (PRCv17)
	//enable_reg_irq();
	//enable_all_irq();
	*NVIC_ISER = (1 << IRQ_WAKEUP) | (1 << IRQ_GOCEP) | (1 << IRQ_TIMER32) | (1 << IRQ_REG0)| (1 << IRQ_REG1)| (1 << IRQ_REG2)| (1 << IRQ_REG3);
 1f2:	4b06      	ldr	r3, [pc, #24]	; (20c <main+0x24>)
 1f4:	4a06      	ldr	r2, [pc, #24]	; (210 <main+0x28>)
  
	mbus_write_message32(0xAF, 0x00000001);
 1f6:	2101      	movs	r1, #1
 1f8:	20af      	movs	r0, #175	; 0xaf
	*NVIC_ISER = (1 << IRQ_WAKEUP) | (1 << IRQ_GOCEP) | (1 << IRQ_TIMER32) | (1 << IRQ_REG0)| (1 << IRQ_REG1)| (1 << IRQ_REG2)| (1 << IRQ_REG3);
 1fa:	601a      	str	r2, [r3, #0]
	mbus_write_message32(0xAF, 0x00000001);
 1fc:	f7ff ff54 	bl	a8 <mbus_write_message32>
	mbus_write_message32(0xAF, 0x00000002);
 200:	2102      	movs	r1, #2
 202:	20af      	movs	r0, #175	; 0xaf
 204:	f7ff ff50 	bl	a8 <mbus_write_message32>
//		}
//	}
//
//	operation_sleep_notimer();

    while(1);
 208:	e7fe      	b.n	208 <main+0x20>
 20a:	46c0      	nop			; (mov r8, r8)
 20c:	e000e100 	.word	0xe000e100
 210:	00000f0d 	.word	0x00000f0d


TSstack_ondemand_v1.4b_CISv2/TSstack_ondemand_v1.4b_CISv2.elf:     file format elf32-littlearm


Disassembly of section .text:

00000000 <hang-0xa0>:
   0:	00004000 	andeq	r4, r0, r0
   4:	000000a3 	andeq	r0, r0, r3, lsr #1
	...
  10:	000000a0 	andeq	r0, r0, r0, lsr #1
  14:	000000a0 	andeq	r0, r0, r0, lsr #1
  18:	000000a0 	andeq	r0, r0, r0, lsr #1
  1c:	000000a0 	andeq	r0, r0, r0, lsr #1
  20:	000000a0 	andeq	r0, r0, r0, lsr #1
  24:	000000a0 	andeq	r0, r0, r0, lsr #1
  28:	000000a0 	andeq	r0, r0, r0, lsr #1
  2c:	00000000 	andeq	r0, r0, r0
  30:	000000a0 	andeq	r0, r0, r0, lsr #1
  34:	000000a0 	andeq	r0, r0, r0, lsr #1
	...
  40:	000001a5 	andeq	r0, r0, r5, lsr #3
  44:	00000000 	andeq	r0, r0, r0
  48:	00000181 	andeq	r0, r0, r1, lsl #3
  4c:	00000199 	muleq	r0, r9, r1
	...

000000a0 <hang>:
  a0:	e7fe      	b.n	a0 <hang>

000000a2 <_start>:
  a2:	f000 f89d 	bl	1e0 <main>
  a6:	e7fc      	b.n	a2 <_start>

Disassembly of section .text.set_halt_until_mbus_tx:

000000a8 <set_halt_until_mbus_tx>:
// MBUS IRQ SETTING
//**************************************************
void set_halt_until_reg(uint32_t reg_id) { *SREG_CONF_HALT = reg_id; }
void set_halt_until_mem_wr(void) { *SREG_CONF_HALT = HALT_UNTIL_MEM_WR; }
void set_halt_until_mbus_rx(void) { *SREG_CONF_HALT = HALT_UNTIL_MBUS_RX; }
void set_halt_until_mbus_tx(void) { *SREG_CONF_HALT = HALT_UNTIL_MBUS_TX; }
  a8:	2209      	movs	r2, #9
  aa:	4b01      	ldr	r3, [pc, #4]	; (b0 <set_halt_until_mbus_tx+0x8>)
  ac:	601a      	str	r2, [r3, #0]
  ae:	4770      	bx	lr
  b0:	a000a000 	.word	0xa000a000

Disassembly of section .text.set_halt_until_mbus_trx:

000000b4 <set_halt_until_mbus_trx>:
void set_halt_until_mbus_trx(void) { *SREG_CONF_HALT = HALT_UNTIL_MBUS_TRX; }
  b4:	220c      	movs	r2, #12
  b6:	4b01      	ldr	r3, [pc, #4]	; (bc <set_halt_until_mbus_trx+0x8>)
  b8:	601a      	str	r2, [r3, #0]
  ba:	4770      	bx	lr
  bc:	a000a000 	.word	0xa000a000

Disassembly of section .text.mbus_write_message32:

000000c0 <mbus_write_message32>:
	// TODO: Read from LC
	return 1;
}

uint32_t mbus_write_message32(uint8_t addr, uint32_t data) {
    uint32_t mbus_addr = 0xA0003000 | (addr << 4);
  c0:	0103      	lsls	r3, r0, #4
  c2:	4802      	ldr	r0, [pc, #8]	; (cc <mbus_write_message32+0xc>)
  c4:	4318      	orrs	r0, r3
    *((volatile uint32_t *) mbus_addr) = data;
  c6:	6001      	str	r1, [r0, #0]
    return 1;
}
  c8:	2001      	movs	r0, #1
  ca:	4770      	bx	lr
  cc:	a0003000 	.word	0xa0003000

Disassembly of section .text.mbus_enumerate:

000000d0 <mbus_enumerate>:

    return 1;
}

void mbus_enumerate(unsigned new_prefix) {
    mbus_write_message32(MBUS_DISC_AND_ENUM, ((MBUS_ENUMERATE_CMD << 28) | (new_prefix << 24)));
  d0:	0603      	lsls	r3, r0, #24
  d2:	2080      	movs	r0, #128	; 0x80
  d4:	0580      	lsls	r0, r0, #22
  d6:	4318      	orrs	r0, r3
    *((volatile uint32_t *) mbus_addr) = data;
  d8:	4b01      	ldr	r3, [pc, #4]	; (e0 <mbus_enumerate+0x10>)
  da:	6018      	str	r0, [r3, #0]
}
  dc:	4770      	bx	lr
  de:	46c0      	nop			; (mov r8, r8)
  e0:	a0003000 	.word	0xa0003000

Disassembly of section .text.test3:

000000e4 <test3>:
    test3 (a+b, b+c, c+d, d+a);
    mbus_write_message32(0xA1, c);
    mbus_write_message32(0xA1, d);
}

void test3 (uint32_t a, uint32_t b, uint32_t c, uint32_t d) {
  e4:	b570      	push	{r4, r5, r6, lr}
  e6:	000e      	movs	r6, r1
  e8:	0015      	movs	r5, r2
  ea:	001c      	movs	r4, r3
    mbus_write_message32(0xA2, a);
  ec:	0001      	movs	r1, r0
  ee:	20a2      	movs	r0, #162	; 0xa2
  f0:	f7ff ffe6 	bl	c0 <mbus_write_message32>
    mbus_write_message32(0xA2, b);
  f4:	0031      	movs	r1, r6
  f6:	20a2      	movs	r0, #162	; 0xa2
  f8:	f7ff ffe2 	bl	c0 <mbus_write_message32>
    mbus_write_message32(0xA2, c);
  fc:	0029      	movs	r1, r5
  fe:	20a2      	movs	r0, #162	; 0xa2
 100:	f7ff ffde 	bl	c0 <mbus_write_message32>
    mbus_write_message32(0xA2, d);
 104:	0021      	movs	r1, r4
 106:	20a2      	movs	r0, #162	; 0xa2
 108:	f7ff ffda 	bl	c0 <mbus_write_message32>
}
 10c:	bd70      	pop	{r4, r5, r6, pc}

Disassembly of section .text.test2:

0000010e <test2>:
void test2 (uint32_t a, uint32_t b, uint32_t c, uint32_t d) {
 10e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 110:	000f      	movs	r7, r1
 112:	0016      	movs	r6, r2
 114:	001d      	movs	r5, r3
 116:	0004      	movs	r4, r0
    mbus_write_message32(0xA1, a);
 118:	0001      	movs	r1, r0
 11a:	20a1      	movs	r0, #161	; 0xa1
 11c:	f7ff ffd0 	bl	c0 <mbus_write_message32>
    mbus_write_message32(0xA1, b);
 120:	0039      	movs	r1, r7
 122:	20a1      	movs	r0, #161	; 0xa1
 124:	f7ff ffcc 	bl	c0 <mbus_write_message32>
    test3 (a+b, b+c, c+d, d+a);
 128:	1972      	adds	r2, r6, r5
 12a:	1963      	adds	r3, r4, r5
 12c:	19b9      	adds	r1, r7, r6
 12e:	19e0      	adds	r0, r4, r7
 130:	f7ff ffd8 	bl	e4 <test3>
    mbus_write_message32(0xA1, c);
 134:	0031      	movs	r1, r6
 136:	20a1      	movs	r0, #161	; 0xa1
 138:	f7ff ffc2 	bl	c0 <mbus_write_message32>
    mbus_write_message32(0xA1, d);
 13c:	0029      	movs	r1, r5
 13e:	20a1      	movs	r0, #161	; 0xa1
 140:	f7ff ffbe 	bl	c0 <mbus_write_message32>
}
 144:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

Disassembly of section .text.test1:

00000146 <test1>:
void test1 (uint32_t a, uint32_t b, uint32_t c, uint32_t d) {
 146:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 148:	000f      	movs	r7, r1
 14a:	0016      	movs	r6, r2
 14c:	001d      	movs	r5, r3
 14e:	0004      	movs	r4, r0
    mbus_write_message32(0xA0, a);
 150:	0001      	movs	r1, r0
 152:	20a0      	movs	r0, #160	; 0xa0
 154:	f7ff ffb4 	bl	c0 <mbus_write_message32>
    mbus_write_message32(0xA0, b);
 158:	0039      	movs	r1, r7
 15a:	20a0      	movs	r0, #160	; 0xa0
 15c:	f7ff ffb0 	bl	c0 <mbus_write_message32>
    test2 (a+b, b+c, c+d, d+a);
 160:	1972      	adds	r2, r6, r5
 162:	1963      	adds	r3, r4, r5
 164:	19b9      	adds	r1, r7, r6
 166:	19e0      	adds	r0, r4, r7
 168:	f7ff ffd1 	bl	10e <test2>
    mbus_write_message32(0xA0, c);
 16c:	0031      	movs	r1, r6
 16e:	20a0      	movs	r0, #160	; 0xa0
 170:	f7ff ffa6 	bl	c0 <mbus_write_message32>
    mbus_write_message32(0xA0, d);
 174:	0029      	movs	r1, r5
 176:	20a0      	movs	r0, #160	; 0xa0
 178:	f7ff ffa2 	bl	c0 <mbus_write_message32>
}
 17c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

Disassembly of section .text.handler_ext_int_gocep:

00000180 <handler_ext_int_gocep>:
//void handler_ext_int_mbusmem(void) { *NVIC_ICPR = (0x1 << IRQ_MBUS_MEM); }
//void handler_ext_int_mbusrx(void) { *NVIC_ICPR = (0x1 << IRQ_MBUS_RX); }
//void handler_ext_int_mbustx(void) { *NVIC_ICPR = (0x1 << IRQ_MBUS_TX); }
//void handler_ext_int_mbusfwd(void) { *NVIC_ICPR = (0x1 << IRQ_MBUS_FWD); }
void handler_ext_int_gocep(void) { 
    *NVIC_ICPR = (0x1 << IRQ_GOCEP); 
 180:	2204      	movs	r2, #4
void handler_ext_int_gocep(void) { 
 182:	b510      	push	{r4, lr}
    *NVIC_ICPR = (0x1 << IRQ_GOCEP); 
 184:	4b03      	ldr	r3, [pc, #12]	; (194 <handler_ext_int_gocep+0x14>)
	mbus_write_message32(0xA5, 0x00000001);
 186:	2101      	movs	r1, #1
 188:	20a5      	movs	r0, #165	; 0xa5
    *NVIC_ICPR = (0x1 << IRQ_GOCEP); 
 18a:	601a      	str	r2, [r3, #0]
	mbus_write_message32(0xA5, 0x00000001);
 18c:	f7ff ff98 	bl	c0 <mbus_write_message32>
}
 190:	bd10      	pop	{r4, pc}
 192:	46c0      	nop			; (mov r8, r8)
 194:	e000e280 	.word	0xe000e280

Disassembly of section .text.handler_ext_int_timer32:

00000198 <handler_ext_int_timer32>:
//void handler_ext_int_spi(void) { *NVIC_ICPR = (0x1 << IRQ_SPI); }
//void handler_ext_int_xot(void) { *NVIC_ICPR = (0x1 << IRQ_XOT); }
//void handler_ext_int_gpio(void) { *NVIC_ICPR = (0x1 << IRQ_GPIO); }

void handler_ext_int_timer32(void) { // TIMER32
    *NVIC_ICPR = (0x1 << IRQ_TIMER32);
 198:	2208      	movs	r2, #8
 19a:	4b01      	ldr	r3, [pc, #4]	; (1a0 <handler_ext_int_timer32+0x8>)
 19c:	601a      	str	r2, [r3, #0]
//    *REG1 = *TIMER32_CNT;
//    *REG2 = *TIMER32_STAT;
//    *TIMER32_STAT = 0x0;
//	wfi_timeout_flag = 1;
//    set_halt_until_mbus_tx();
    }
 19e:	4770      	bx	lr
 1a0:	e000e280 	.word	0xe000e280

Disassembly of section .text.handler_ext_int_wakeup:

000001a4 <handler_ext_int_wakeup>:
//[ 4] = mbus message
//[ 8] = gpio[0]
//[ 9] = gpio[1]
//[10] = gpio[2]
//[11] = gpio[3]
    *NVIC_ICPR = (0x1 << IRQ_WAKEUP); 
 1a4:	2201      	movs	r2, #1
 1a6:	4b01      	ldr	r3, [pc, #4]	; (1ac <handler_ext_int_wakeup+0x8>)
 1a8:	601a      	str	r2, [r3, #0]
//    mbus_copy_mem_from_local_to_remote_stream (0x0, 0xA, (uint32_t *) (0xC00 << 2), 255);
//    mbus_copy_mem_from_local_to_remote_stream (0x0, 0xA, (uint32_t *) (0xD00 << 2), 255);
//    mbus_copy_mem_from_local_to_remote_stream (0x0, 0xA, (uint32_t *) (0xE00 << 2), 255);
//    mbus_copy_mem_from_local_to_remote_stream (0x0, 0xA, (uint32_t *) (0xF00 << 2), 255);

}
 1aa:	4770      	bx	lr
 1ac:	e000e280 	.word	0xe000e280

Disassembly of section .text.operation_init:

000001b0 <operation_init>:
//}
//


// Temporary operation_init
void operation_init(void){
 1b0:	b510      	push	{r4, lr}
	mbus_write_message32(0xAF, 0x00000003);
 1b2:	2103      	movs	r1, #3
 1b4:	20af      	movs	r0, #175	; 0xaf
 1b6:	f7ff ff83 	bl	c0 <mbus_write_message32>

    enumerated = 0x5453104b;
 1ba:	4b07      	ldr	r3, [pc, #28]	; (1d8 <operation_init+0x28>)
 1bc:	4a07      	ldr	r2, [pc, #28]	; (1dc <operation_init+0x2c>)
 1be:	601a      	str	r2, [r3, #0]

    set_halt_until_mbus_trx();
 1c0:	f7ff ff78 	bl	b4 <set_halt_until_mbus_trx>
    mbus_enumerate(MEM_ADDR);
 1c4:	2007      	movs	r0, #7
 1c6:	f7ff ff83 	bl	d0 <mbus_enumerate>
    set_halt_until_mbus_tx();
 1ca:	f7ff ff6d 	bl	a8 <set_halt_until_mbus_tx>

	mbus_write_message32(0xAF, 0x00000004);
 1ce:	2104      	movs	r1, #4
 1d0:	20af      	movs	r0, #175	; 0xaf
 1d2:	f7ff ff75 	bl	c0 <mbus_write_message32>
}
 1d6:	bd10      	pop	{r4, pc}
 1d8:	00000234 	.word	0x00000234
 1dc:	5453104b 	.word	0x5453104b

Disassembly of section .text.startup.main:

000001e0 <main>:
//********************************************************************
// MAIN function starts here             
//********************************************************************

int main(){
	mbus_write_message32(0xAF, 0x00000000);
 1e0:	2100      	movs	r1, #0
 1e2:	20af      	movs	r0, #175	; 0xaf
int main(){
 1e4:	b510      	push	{r4, lr}
	mbus_write_message32(0xAF, 0x00000000);
 1e6:	f7ff ff6b 	bl	c0 <mbus_write_message32>

    // Only enable relevant interrupts (PRCv17)
	//enable_reg_irq();
	//enable_all_irq();
	//*NVIC_ISER = (1 << IRQ_WAKEUP) | (1 << IRQ_GOCEP) | (1 << IRQ_TIMER32) | (1 << IRQ_REG0)| (1 << IRQ_REG1)| (1 << IRQ_REG2)| (1 << IRQ_REG3);
	*NVIC_ISER = (1 << IRQ_WAKEUP) | (1 << IRQ_GOCEP);
 1ea:	2205      	movs	r2, #5
 1ec:	4b0e      	ldr	r3, [pc, #56]	; (228 <main+0x48>)
 1ee:	601a      	str	r2, [r3, #0]
  
    if (enumerated != 0x5453104b){
 1f0:	4b0e      	ldr	r3, [pc, #56]	; (22c <main+0x4c>)
 1f2:	681a      	ldr	r2, [r3, #0]
 1f4:	4b0e      	ldr	r3, [pc, #56]	; (230 <main+0x50>)
 1f6:	429a      	cmp	r2, r3
 1f8:	d00f      	beq.n	21a <main+0x3a>
        test1 (1, 2, 3, 4);
 1fa:	2304      	movs	r3, #4
 1fc:	2203      	movs	r2, #3
 1fe:	2102      	movs	r1, #2
 200:	2001      	movs	r0, #1
 202:	f7ff ffa0 	bl	146 <test1>

	    mbus_write_message32(0xAF, 0x00000001);
 206:	2101      	movs	r1, #1
 208:	20af      	movs	r0, #175	; 0xaf
 20a:	f7ff ff59 	bl	c0 <mbus_write_message32>
	    mbus_write_message32(0xAF, 0x00000002);
 20e:	2102      	movs	r1, #2
 210:	20af      	movs	r0, #175	; 0xaf
 212:	f7ff ff55 	bl	c0 <mbus_write_message32>
        operation_init();
 216:	f7ff ffcb 	bl	1b0 <operation_init>
//		}
//	}
//
//	operation_sleep_notimer();

	mbus_write_message32(0xAF, 0xFFFFFFFF);
 21a:	2101      	movs	r1, #1
 21c:	20af      	movs	r0, #175	; 0xaf
 21e:	4249      	negs	r1, r1
 220:	f7ff ff4e 	bl	c0 <mbus_write_message32>
    while(1);
 224:	e7fe      	b.n	224 <main+0x44>
 226:	46c0      	nop			; (mov r8, r8)
 228:	e000e100 	.word	0xe000e100
 22c:	00000234 	.word	0x00000234
 230:	5453104b 	.word	0x5453104b

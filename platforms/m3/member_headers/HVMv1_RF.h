//************************************************************
// Desciption: HVMv1 Register File Header File
//      Generated by genRF (Version 1.42) 11/03/2020 10:59:37
//************************************************************

#ifndef HVMV1_RF_H
#define HVMV1_RF_H

// Register 0x00
typedef union hvmv1_r00{
  struct{
    unsigned HVM_VBN_SEL		: 6;
    unsigned HVM_VBN_EXT_SEL		: 1;
    unsigned HVM_RESETN		: 1;
  };
  uint32_t as_int;
} hvmv1_r00_t;
#define HVMv1_R00_DEFAULT {{0x00, 0x0, 0x0}}
#define HVMv1_R00_DEFAULT_AS_INT 0x000000
_Static_assert(sizeof(hvmv1_r00_t) == 4, "Punned Structure Size");

// Register 0x01
typedef union hvmv1_r01{
  struct{
    unsigned HVM_CLK_NPM_SEL		: 4;
    unsigned HVM_CLK_RESET_SEL		: 4;
    unsigned HVM_CLK_PM_SEL		: 4;
    unsigned HVM_CLK_NCP_SEL		: 4;
    unsigned HVM_CLK_CP_SEL		: 4;
    unsigned HVM_CLK_EXT_SEL		: 1;
  };
  uint32_t as_int;
} hvmv1_r01_t;
#define HVMv1_R01_DEFAULT {{0x0, 0x0, 0x0, 0x0, 0x0, 0x0}}
#define HVMv1_R01_DEFAULT_AS_INT 0x000000
_Static_assert(sizeof(hvmv1_r01_t) == 4, "Punned Structure Size");

// Register 0x02
typedef union hvmv1_r02{
  struct{
    unsigned HVM_PM_EN		: 12;
    unsigned HVM_PM_CAP_SEL		: 2;
  };
  uint32_t as_int;
} hvmv1_r02_t;
#define HVMv1_R02_DEFAULT {{0x000, 0x0}}
#define HVMv1_R02_DEFAULT_AS_INT 0x000000
_Static_assert(sizeof(hvmv1_r02_t) == 4, "Punned Structure Size");

// Register 0x03
typedef union hvmv1_r03{
  struct{
    unsigned HVM_RESET_MODE_SEL		: 12;
  };
  uint32_t as_int;
} hvmv1_r03_t;
#define HVMv1_R03_DEFAULT {{0x000}}
#define HVMv1_R03_DEFAULT_AS_INT 0x000000
_Static_assert(sizeof(hvmv1_r03_t) == 4, "Punned Structure Size");

// Register 0x04
typedef union hvmv1_r04{
  struct{
    unsigned HVM_RESET_REG		: 24;
  };
  uint32_t as_int;
} hvmv1_r04_t;
#define HVMv1_R04_DEFAULT {{0x000000}}
#define HVMv1_R04_DEFAULT_AS_INT 0x000000
_Static_assert(sizeof(hvmv1_r04_t) == 4, "Punned Structure Size");

// Register 0x05
typedef union hvmv1_r05{
  struct{
    unsigned HVM_POS_SEL_0		: 24;
  };
  uint32_t as_int;
} hvmv1_r05_t;
#define HVMv1_R05_DEFAULT {{0x000000}}
#define HVMv1_R05_DEFAULT_AS_INT 0x000000
_Static_assert(sizeof(hvmv1_r05_t) == 4, "Punned Structure Size");

// Register 0x06
typedef union hvmv1_r06{
  struct{
    unsigned HVM_POS_SEL_1		: 24;
  };
  uint32_t as_int;
} hvmv1_r06_t;
#define HVMv1_R06_DEFAULT {{0x000000}}
#define HVMv1_R06_DEFAULT_AS_INT 0x000000
_Static_assert(sizeof(hvmv1_r06_t) == 4, "Punned Structure Size");

// Register 0x07
typedef union hvmv1_r07{
  struct{
    unsigned HVM_POS_SEL_2		: 24;
  };
  uint32_t as_int;
} hvmv1_r07_t;
#define HVMv1_R07_DEFAULT {{0x000000}}
#define HVMv1_R07_DEFAULT_AS_INT 0x000000
_Static_assert(sizeof(hvmv1_r07_t) == 4, "Punned Structure Size");

// Register 0x08
typedef union hvmv1_r08{
  struct{
    unsigned HVM_POS_SEL_3		: 24;
  };
  uint32_t as_int;
} hvmv1_r08_t;
#define HVMv1_R08_DEFAULT {{0x000000}}
#define HVMv1_R08_DEFAULT_AS_INT 0x000000
_Static_assert(sizeof(hvmv1_r08_t) == 4, "Punned Structure Size");

// Register 0x09
typedef union hvmv1_r09{
  struct{
    unsigned HVM_POS_SEL_4		: 24;
  };
  uint32_t as_int;
} hvmv1_r09_t;
#define HVMv1_R09_DEFAULT {{0x000000}}
#define HVMv1_R09_DEFAULT_AS_INT 0x000000
_Static_assert(sizeof(hvmv1_r09_t) == 4, "Punned Structure Size");

// Register 0x0A
typedef union hvmv1_r0A{
  struct{
    unsigned HVM_POS_SEL_5		: 24;
  };
  uint32_t as_int;
} hvmv1_r0A_t;
#define HVMv1_R0A_DEFAULT {{0x000000}}
#define HVMv1_R0A_DEFAULT_AS_INT 0x000000
_Static_assert(sizeof(hvmv1_r0A_t) == 4, "Punned Structure Size");

// Register 0x0B
typedef union hvmv1_r0B{
  struct{
    unsigned HVM_NEG_SELB		: 12;
    unsigned HVM_NEG_SEL		: 12;
  };
  uint32_t as_int;
} hvmv1_r0B_t;
#define HVMv1_R0B_DEFAULT {{0x000, 0x000}}
#define HVMv1_R0B_DEFAULT_AS_INT 0x000000
_Static_assert(sizeof(hvmv1_r0B_t) == 4, "Punned Structure Size");

// Register 0x0C
typedef union hvmv1_r0C{
  struct{
    unsigned LC_CLK_RING		: 2;
    unsigned LC_CLK_DIV		: 2;
  };
  uint32_t as_int;
} hvmv1_r0C_t;
#define HVMv1_R0C_DEFAULT {{0x1, 0x2}}
#define HVMv1_R0C_DEFAULT_AS_INT 0x000009
_Static_assert(sizeof(hvmv1_r0C_t) == 4, "Punned Structure Size");

#endif // HVMV1_RF_H
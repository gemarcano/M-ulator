freeze_gpio_out() in:
    ADXL362_stop()
    operation_spi_stop()
        this is used in:
            ADXL362_enable()
            ADXL362_stop()
            operation_sns_run() only if adxl_enabled=1

unfreeze_gpio_out() in:
    ADXL362_stop()
    operation_spi_init()
    operation_i2c_start()


gpio_set_dir_with_mask(sht35_mask,(1<<GPIO_SDA) | (1<<GPIO_SCL));
    operation_i2c_start() in sht35_meas_data()
    operation_i2c_addr()
    operation_i2c_cmd()
    operation_i2c_rd()

In mbus_isolation,
    GPIO_I1O0 becomes 0 when isolated by LRC_ISOLATE
    => Default = output
    GPIO_OUT becomes 0 when isolated by LRC_ISOLATE
    => Default = 0



<Both>
wakeup_data_header == 0x32,
wakeup_data[21] = 1 // SHT35
wakeup_data[20] = 1 // ADXL

-> sleep current = ~380nA

<Stop>
wakeup_data_header = 0x33

-> sleep current = ~180nA


<SHT Only>
    wakeup_data_header == 0x32,
    wakeup_data[21] = 1 // SHT35
    wakeup_data[20] = 0 // ADXL
    
    
    SDA=0, SCL=0, at then end of operation_i2c_addr(0x44,0x1);
    Then, SDA becomes input in "operation_i2c_rd(0x0); // CRC"
    
    SCL=1 in operation_i2c_stop()
    
    But, there is no freeze_gpio_out(), 
    so SDA=SCL=0, and SDA=SCL=output in sleep
    
    Result:
        ADXL never enabled
        SDA (output) = 0
        SCL (output) = 0
        sleep current = ~30nA


<ADXL Only>
    wakeup_data_header == 0x32,
    wakeup_data[21] = 0 // SHT35
    wakeup_data[20] = 1 // ADXL
    
    Result:
        SHT never enabled
        EN (output) = 1
        INT (input)
        sleep current = ~280nA


<Both>
    wakeup_data_header == 0x32,
    wakeup_data[21] = 1 // SHT35
    wakeup_data[20] = 1 // ADXL

    WARNING: Use of *GPIO_DATA returns 0 whenever the pad is set to "output".
            So gpio_write_data_with_mask(adxl_mask, *) sets SCL=SDA=0.
            So gpio_write_data_with_mask(sht35_mask, *) sets ADXL_EN=0.

    This causes SCL set to 0 in operation_spi_init() before going into sleep.

    SDA becomes input in "operation_i2c_rd(0x0); // CRC" and never changes after that.

    Result:
        EN (output) = 1
        INT (input)
        SDA (input)
        SCL (output) = 0
        sleep current = ~280nA

<Both -> Stop>
    wakeup_data_header == 0x33,

    Goes through ADXL362_power_off() -> ADXL362_stop()
        Use of *GPIO_DIR in gpio_set_dir_with_mask(adxl_mask, *) sets SHT directions to input,
        because SHT directions have never set in this wakeup session.

    Result:
        EN (output) = 0 
        INT (output) = 0
        SDA (input)
        SCL (input)
        sleep current = ~180nA


<Both -> Stop -> SHT Only>
    wakeup_data_header == 0x32,
    wakeup_data[21] = 1 // SHT35
    wakeup_data[20] = 0 // ADXL
    
    Result:
        EN (output) = 0 
        INT (output) = 0
        SDA (output) = 0
        SCL (output) = 0
        sleep current = ~30nA




1780:   int main(){
1812:   pmu_adc_read_latest();
1955:   if (astack_detection_mode & 0x1) ADXL362_enable();
283:        operation_spi_init();
336:            gpio_set_dir_with_mask(adxl_mask,(1<<GPIO_ADXL_EN) | (0<<GPIO_ADXL_INT));
337:            gpio_write_data_with_mask(adxl_mask,(1<<GPIO_ADXL_EN) | (0<<GPIO_ADXL_INT)); // << Crashes here
338:            unfreeze_gpio_out();
339:            unfreeze_spi_out();
287:        *REG_CPS = *REG_CPS | 0x2;      // Turn on ADXL
291:        ADXL362_init();
251:            ADXL362_reg_wr(ADXL362_SOFT_RESET,0x52);
227:                gpio_write_data_with_mask(adxl_mask,(0<<GPIO_ADXL_EN) | (0<<GPIO_ADXL_INT));
233:                gpio_write_data_with_mask(adxl_mask,(1<<GPIO_ADXL_EN) | (0<<GPIO_ADXL_INT));
275:            ADXL362_reg_rd(ADXL362_STATUS);
238:                gpio_write_data_with_mask(adxl_mask,(0<<GPIO_ADXL_EN) | (0<<GPIO_ADXL_INT));
244:                gpio_write_data_with_mask(adxl_mask,(1<<GPIO_ADXL_EN) | (0<<GPIO_ADXL_INT));
294         operation_spi_stop();
343:            freeze_spi_out();
344:            freeze_gpio_out();
1974:   operation_sns_run();

1549:       sht35_meas_data();
535:            *REG_CPS = *REG_CPS | 0x1;      // Turn on SHT
538:            operation_i2c_start();
353:                gpio_write_data_with_mask(sht35_mask,(1<<GPIO_SDA) | (1<<GPIO_SCL));
355:                gpio_set_dir_with_mask(sht35_mask,(1<<GPIO_SDA) | (1<<GPIO_SCL));
356:                unfreeze_gpio_out();    // No freeze following?
542:            operation_i2c_stop();   
560:            *REG_CPS = *REG_CPS & 0xFFFFFFFE;   // Turn off SHT

1653:       ADXL362_power_off();
323:            ADXL362_stop();
301:                operation_spi_init();
336:                    gpio_set_dir_with_mask(adxl_mask,(1<<GPIO_ADXL_EN) | (0<<GPIO_ADXL_INT));
337:                    gpio_write_data_with_mask(adxl_mask,(1<<GPIO_ADXL_EN) | (0<<GPIO_ADXL_INT)); // << Crashes here
338:                    unfreeze_gpio_out();
339:                    unfreeze_spi_out();
310:                operation_spi_stop();
343:                    freeze_spi_out();
344:                    freeze_gpio_out();
314:                unfreeze_gpio_out();                // ????
316:                gpio_set_dir_with_mask(adxl_mask,(1<<GPIO_ADXL_EN) | (1<<GPIO_ADXL_INT));
317:                gpio_write_data_with_mask(adxl_mask,0);
318:                freeze_gpio_out();
325:            *REG_CPS = *REG_CPS & 0xFFFFFFFD;   // Turn off ADXL
1658:       ADXL362_enable();
283:            operation_spi_init();
336:                gpio_set_dir_with_mask(adxl_mask,(1<<GPIO_ADXL_EN) | (0<<GPIO_ADXL_INT));
337:                gpio_write_data_with_mask(adxl_mask,(1<<GPIO_ADXL_EN) | (0<<GPIO_ADXL_INT)); // << Crashes here
338:                unfreeze_gpio_out();
339:                unfreeze_spi_out();
287:            *REG_CPS = *REG_CPS | 0x2;      // Turn on ADXL
291:            ADXL362_init();
251:                ADXL362_reg_wr(ADXL362_SOFT_RESET,0x52);
227:                    gpio_write_data_with_mask(adxl_mask,(0<<GPIO_ADXL_EN) | (0<<GPIO_ADXL_INT));
233:                    gpio_write_data_with_mask(adxl_mask,(1<<GPIO_ADXL_EN) | (0<<GPIO_ADXL_INT));
275:                ADXL362_reg_rd(ADXL362_STATUS);
238:                    gpio_write_data_with_mask(adxl_mask,(0<<GPIO_ADXL_EN) | (0<<GPIO_ADXL_INT));
244:                    gpio_write_data_with_mask(adxl_mask,(1<<GPIO_ADXL_EN) | (0<<GPIO_ADXL_INT));
294             operation_spi_stop();
343:                freeze_spi_out();
344:                freeze_gpio_out();
1688:       gpio_write_data_with_mask(sht35_mask,(1<<GPIO_SDA) | (1<<GPIO_SCL));
1696        operation_spi_init();
336:            gpio_set_dir_with_mask(adxl_mask,(1<<GPIO_ADXL_EN) | (0<<GPIO_ADXL_INT));
337:            gpio_write_data_with_mask(adxl_mask,(1<<GPIO_ADXL_EN) | (0<<GPIO_ADXL_INT)); // << Crashes here
338:            unfreeze_gpio_out();
339:            unfreeze_spi_out();
1697        ADXL362_reg_rd(ADXL362_STATUS);
238:            gpio_write_data_with_mask(adxl_mask,(0<<GPIO_ADXL_EN) | (0<<GPIO_ADXL_INT));
244:            gpio_write_data_with_mask(adxl_mask,(1<<GPIO_ADXL_EN) | (0<<GPIO_ADXL_INT));
1701        operation_spi_stop();
343:             freeze_spi_out();
344:             freeze_gpio_out();
1717:       operation_sleep_notimer();
1253:           ADXL362_power_off();
323:                ADXL362_stop();
301:                    operation_spi_init();
336:                        gpio_set_dir_with_mask(adxl_mask,(1<<GPIO_ADXL_EN) | (0<<GPIO_ADXL_INT));
337:                        gpio_write_data_with_mask(adxl_mask,(1<<GPIO_ADXL_EN) | (0<<GPIO_ADXL_INT)); // << Crashes here
338:                        unfreeze_gpio_out();
339:                        unfreeze_spi_out();
310:                    operation_spi_stop();
343:                        freeze_spi_out();
344:                        freeze_gpio_out();
314:                    unfreeze_gpio_out();            // ????
316:                    gpio_set_dir_with_mask(adxl_mask,(1<<GPIO_ADXL_EN) | (1<<GPIO_ADXL_INT));
317:                    gpio_write_data_with_mask(adxl_mask,0);
318:                    freeze_gpio_out();
325:                *REG_CPS = *REG_CPS & 0xFFFFFFFD;   // Turn off ADXL
1256:           operation_sns_sleep_check();    
1265:       operation_sleep();
1234:           mbus_sleep_all();
2940    operation_sns_run(); (?)
2044    operation_sleep_notimer();
